#!/bin/bash
# imagemagick
# libxmp
# phantomjs
# libxml2-dev and libxslt-dev headers
# venv
echo "+-----------------------+"
echo "| CHECKING DEPENDENCIES |"
echo "+-----------------------+"
exitstatus=0

unamestring=`uname`
platform='unknown'
pkgman='installing '

if [[ "$unamestring" == 'Darwin' ]]; then
	platform="OSX"
	pkgman="brew install"
elif [[ "$unamestring" == 'Linux' ]]; then
	platform="Linux-generic"
	linuxname=`lsb_release -si`
	if [[ "$linuxname" == 'Ubuntu' ]]; then
		platform="Ubuntu"
		pkgman="sudo apt-get install"
	else 
		pkgman="sudo yum install"
	fi
fi

command -v gcc >/dev/null 2>&1 || { 
	if [[ "$platform" == 'OSX' ]]
	then
		echo "ðŸ’© gcc not found: ðŸ‘‰ try installing the XCode command line tools"
	elif [[ "$platform" == 'Ubuntu' ]]
	then
		echo "ðŸ’© gcc not found: ðŸ‘‰ try $pgkman build-essential"
	else
		echo "ðŸ’© gcc not found: ðŸ‘‰ try $pkgman gcc" >&2
	fi

	exitstatus=1
}

command -v python3 >/dev/null 2>&1 || { echo "ðŸ’© python 3 not found\nðŸ‘‰ try $pkgman python3" >&2; exitstatus=1; }
command -v node >/dev/null 2>&1 || {
	if [[ "$platform" == 'OSX' ]]
	then
		echo "ðŸ’© nodejs not found: ðŸ‘‰ try installing the package from nodejs.org/en/download" >&2 
	elif [[ "$platform" == 'Ubuntu' ]]
	then
		echo "ðŸ’© nodejs not found: ðŸ‘‰ try $pkgman nodejs-legacy" >&2 
	else
		echo "ðŸ’© nodejs not found: ðŸ‘‰ try $pkgman node" >&2
	fi

	exitstatus=1
}

command -v npm >/dev/null 2>&1 || {
	if [[ "$platform" == 'OSX' ]]
	then
		echo "ðŸ’© npm not found\nðŸ‘‰ try installing the nodejs package from nodejs.org/en/download" >&2 
	elif [[ "$platform" == 'Ubuntu' ]]
	then
		echo "ðŸ’© nodejs not found: ðŸ‘‰ try $pkgman npm" >&2 
	else
		echo "ðŸ’© nodejs not found: ðŸ‘‰ try $pkgman npm" >&2
	fi

	exitstatus=1
}

command -v pip3 >/dev/null 2>&1 || { echo "ðŸ’© pip3 not found: ðŸ‘‰ try $pkgman python3-pip" >&2; exitstatus=1; }
command -v virtualenv >/dev/null 2>&1 || { 
	if [[ "$platform" == 'Ubuntu' ]]
	then
		echo "ðŸ’© virtualenv not found: ðŸ‘‰ try $pkgman virtualenv" >&2
	else
		echo "ðŸ’© virtualenv not found: ðŸ‘‰ try pip3 install virtualenv" >&2
	fi

	exitstatus=1
}
command -v phantomjs >/dev/null 2>&1 || { echo "ðŸ’© phantomjs not found:ðŸ‘‰ try $pkgman phantomjs" >&2; exitstatus=1; }

command -v convert >/dev/null 2>&1 || { echo "ðŸ’© ImageMagick (convert) not found: ðŸ‘‰ try $pkgman imagemagick" >&2; exitstatus=1; }
command -v mogrify >/dev/null 2>&1 || { echo "ðŸ’© ImageMagick (mogrify) not found: ðŸ‘‰ try $pkgman imagemagick" >&2; exitstatus=1; }

# check python, node versions
if [[ ! -z `command -v python3 >/dev/null 2>&1` ]]
then
	PYPASS=`python3 -c 'import sys; print(int(sys.version_info[0]==3 and sys.version_info[1] >= 4))'`
	if [ $PYPASS != 1 ]
	then
		{ echo "ðŸ’© unsupported python3 version found. Please upgrade your python >= 3.4" >&2; exitstatus=1; }
	fi
fi

if [[ ! -z `command -v phantomjs >/dev/null 2>&1` ]]
then
	NODEPASS=`node --version | cut -c2- | awk -F. '{print (($1 == 0 && $2>=12) || ($1 >= 4))}'`
	if [ $NODEPASS != 1 ]
	then
		{ echo "ðŸ’© unsupported nodejs version found. Please upgrade to >= 0.12" >&2; exitstatus=1; }
	fi
fi

# check for libxml2 and libxslt
if [ -z `find /usr/include -name libxml2 2>/dev/null` ]
then
	echo "ðŸ’© libxml2 not found" >&2
	if [[ "$platform" == 'OSX' ]]
	then
		echo "ðŸ‘‰ try $pkgman libxml2"
	elif [[ "$platform" == 'Ubuntu' ]]
	then
		echo "ðŸ‘‰ try $pkgman libxml2-dev"
	fi

	exitstatus=1
fi

if [ -z `find /usr/include -name libxslt 2>/dev/null` ]
then
	echo "ðŸ’© libxslt not found" >&2
	if [[ "$platform" == 'OSX' ]]
	then
		echo "ðŸ‘‰ try $pkgman libxslt"
	elif [[ "$platform" == 'Ubuntu' ]]
	then
		echo "ðŸ‘‰ try $pkgman libxslt-dev"
	fi

	exitstatus=1
fi

# check for libjpeg on linux
if [[ "$unamestring" == 'Linux' ]]
then
	if [ -z `find /usr/include -name jpeglib.h 2>/dev/null` ]
	then
		if [[ "$platform" == 'Ubuntu' ]]
		then
			echo "ðŸ’© libjpeg not found ðŸ‘‰ try $pkgman libjpeg-dev"
		else
			echo "ðŸ’© libjpeg not found ðŸ‘‰ try $pkgman libjpeg"
		fi
	fi
fi

if [ $exitstatus != 0 ]
then
	echo "+-------------------------------------+"
	echo "| Some dependencies could not be met. |"
	echo "|   Please install and try again      |"
	echo "+-------------------------------------+"
	exit $exitstatus
else
	echo "Dependencies met!"
fi

SOURCE="${BASH_SOURCE[0]}"
while [ -h "$SOURCE" ]; do # resolve $SOURCE until the file is no longer a symlink
  DIR="$( cd -P "$( dirname "$SOURCE" )" && pwd )"
  SOURCE="$(readlink "$SOURCE")"
  [[ $SOURCE != /* ]] && SOURCE="$DIR/$SOURCE" # if $SOURCE was a relative symlink, we need to resolve it relative to the path where the symlink file was located
done
DIR="$( cd -P "$( dirname "$SOURCE" )" && pwd )"

cd $DIR

echo "+----------------------------+"
echo "| Creating Python Virtualenv |"
echo "+----------------------------+"

virtualenv -p $(which python3) lib/velvenv
source lib/velvenv/bin/activate
pip3 install -r requirements.txt
deactivate

echo "+-------------------------+"
echo "| Installing Node modules |"
echo "+-------------------------+"

npm install

